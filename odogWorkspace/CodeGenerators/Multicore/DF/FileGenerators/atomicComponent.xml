<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fileGenerator PUBLIC "-//ODOGFILEGENERATOR//DTD//EN" "">

<fileGenerator>

<text><![CDATA[#include <stdlib.h>
#include <dynamicFifoSafe.h>
#include <pthread.h>
#include "copyData.h"

extern pthread_mutex_t ]]></text><argument name="containerName"/><text><![CDATA[stateMutex;
extern int ]]></text><argument name="containerName"/><text><![CDATA[numberOfReadBlocked;
extern int ]]></text><argument name="containerName"/><text><![CDATA[numberOfWriteBlocked;
extern void ]]></text><argument name="containerName"/><text><![CDATA[_wakeAllWriteBlocked();
extern void ]]></text><argument name="containerName"/><text><![CDATA[_writeBlock();
extern void ]]></text><argument name="containerName"/><text><![CDATA[_writeUnblock();
extern int ]]></text><argument name="containerName"/><text><![CDATA[writeBlocked[]]></text><argument name="numberOfComponents"/><text><![CDATA[];

]]></text>

<argument name="instanceExecutionMethods"/>
<argument name="signals"/>

<text>
static int
odog_numberOfConnections(char *port) {
</text>

<argument name="numberOfConnectionsBody"/>
<text>} 

static char *
odog_nameOfConnection(char *port, int number) {
</text>
<argument name="nameOfConnectionBody"/>
<text>
    return NULL;
}

static short
odog_getSampleRate_con(char *p1) {
</text>
<argument name="getSampleRateBody"/>
<text>
    return 0;
}

static void 
odog_setSampleRate_con(char *p1, short p2) {
</text>
<argument name="setSampleRateBody"/>
<text><![CDATA[
}

static void
odog_setSampleRate(char *p1, short p2) {
int i;

    int size = odog_numberOfConnections(p1);
    for(i = 0;i < size;i++) {
       char *con = odog_nameOfConnection(p1, i);
       odog_setSampleRate_con(con, p2);
    }
}

static short
odog_getSampleRate(char *p1) {
    return odog_getSampleRate_con(odog_nameOfConnection(p1, 0));
}

static void
odog_stopExecution() {
]]></text>
<argument name="stopExecutionBody"/>
<text><![CDATA[
}

static void
odog_receive(char *p1, void **p2, size_t *p3) {
void **vec;
char fromc = -1;

]]></text>
<argument name="receiveBody"/>
<text><![CDATA[

   if(fromc != -1) {
       pthread_mutex_lock(&]]></text><argument name="containerName"/><text><![CDATA[stateMutex);
       if(]]></text><argument name="containerName"/><text><![CDATA[writeBlocked[fromc] == 1) {
           ]]></text><argument name="containerName"/><text><![CDATA[_writeUnblock(fromc);
       }
       pthread_mutex_unlock(&]]></text><argument name="containerName"/><text><![CDATA[stateMutex);
   }
}

static void
odog_send(char *p1, void *p2, size_t length) {
  odog_data_pkg *p;
]]></text>
<argument name="sendBody"/>
<text>
}<![CDATA[

static void
odog_sendAll(char *p1, void *p2, size_t length) {
int n, i;
char *qname;

  n = odog_numberOfConnections(p1);
  for(i = 0;i < n;i++) {
      qname = odog_nameOfConnection(p1, i);
      odog_send(qname, p2, length);
  }
}

static char
odog_canReceive(char *p1, int p2) {
    return 1;
}

static char
odog_canReceiveAll(char *p1, int p2) {
    return 1;
}

static char
odog_canSend(char *p1, int p2) {
    return 1;
}

static char
odog_canSendAll(char *p1, int p2) {
    return 1;
}
]]></text>

<argument name="attributes"/>

<argument name="initModule"/>
<argument name="computeModule"/>
<argument name="finishModule"/>

<text><![CDATA[
void *
odog_compute_wraper(void *idp) {

        while(1) {
        ]]></text>
<argument name="inputTest"/><text>

_yieldTest:
        pthread_testcancel();
        </text>
<argument name="yieldTest"/><text><![CDATA[

            pthread_mutex_lock(&]]></text><argument name="containerName"/><text><![CDATA[stateMutex);        
            if(]]></text><argument name="containerName"/><text><![CDATA[numberOfWriteBlocked + ]]></text><argument name="containerName"/><text><![CDATA[numberOfReadBlocked + 1 == ]]></text><argument name="numberOfComponents"/><text><![CDATA[) {
                ]]></text><argument name="containerName"/><text><![CDATA[_wakeAllWriteBlocked();
            }
            else {
                ]]></text><argument name="containerName"/><text><![CDATA[_writeBlock(]]></text><argument name="componentId"/><text><![CDATA[);
            }
            pthread_mutex_unlock(&]]></text><argument name="containerName"/><text><![CDATA[stateMutex);

        goto _yieldTest;

_execute:
        odog_compute();
        pthread_testcancel();
    }
}]]></text>

</fileGenerator>
