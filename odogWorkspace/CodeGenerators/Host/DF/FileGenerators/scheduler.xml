<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fileGenerator PUBLIC "-//ODOGFILEGENERATOR//DTD//EN" "">

<fileGenerator>

<text><![CDATA[
#include "timer.h"
#include "dynamicFifo.h"
#include <stdlib.h>

#define CONCURRENCY 1

#define READY 1
#define DEFERABLE 3
#define BLOCKED 0

void classifyComponent(int, short);
int getComponent(short *, short);

#define NCOMPONENTS ]]></text>

<argument name="ncomponents"/>
<text>
</text>
<argument name="signals"/>
<text>

static odog_timer </text><argument name="topologyName"/><text>_timer;

char </text><argument name="topologyName"/><text>_stopExecution;

static short componentsState[NCOMPONENTS];

static int ninputs[NCOMPONENTS];
static int *ninputConnections[NCOMPONENTS];
static dynamic_fifo ***inputFifo[NCOMPONENTS];
static short **inputSampleRates[NCOMPONENTS];
static int ninputComponents[NCOMPONENTS];
static int *inputComponents[NCOMPONENTS];

static int noutputs[NCOMPONENTS];
static int *noutputConnections[NCOMPONENTS];
static dynamic_fifo ***outputFifo[NCOMPONENTS];
static short ***outputSampleRates[NCOMPONENTS];
static int noutputComponents[NCOMPONENTS];
static int *outputComponents[NCOMPONENTS];

</text>

<argument name="componentsExecMethods"/>

<text>
void (*</text><argument name="topologyName"/><text><![CDATA[_fptr[NCOMPONENTS][3])(void);

#define init() ]]></text><argument name="topologyName"/><text><![CDATA[_user_init()
#define finish() ]]></text><argument name="topologyName"/><text><![CDATA[_user_finish()
]]></text>

<argument name="userInitMethod"/>

<text>
</text>

<argument name="userFinishMethod"/>

<text>
void
</text>

<argument name="topologyName"/>
<text><![CDATA[_odog_init() {
int i;

    odog_timer_start(&]]></text><argument name="topologyName"/><text><![CDATA[_timer);

]]></text>
<argument name="initSignals"/>
<argument name="initializeFptr"/>
<argument name="ninputs"/>
<argument name="ninputConnections"/>
<argument name="inputFifo"/>
<argument name="inputSampleRates"/>
<argument name="ninputComponents"/>
<argument name="inputComponents"/>
<argument name="noutputs"/>
<argument name="noutputConnections"/>
<argument name="outputFifo"/>
<argument name="outputSampleRates"/>
<argument name="noutputComponents"/>
<argument name="outputComponents"/>
<text><![CDATA[
    ]]></text><argument name="topologyName"/><text><![CDATA[_user_init();
    
    for(i = 0;i < NCOMPONENTS;i++) {
        ]]></text><argument name="topologyName"/><text><![CDATA[_fptr[i][0]();
    }

    ]]></text><argument name="topologyName"/><text><![CDATA[_stopExecution = 0;
}
]]>
</text>

<argument name="topologyName"/>
<text><![CDATA[_odog_compute() {
    int i, id;
    char deferred;

    for(i = 0;i < NCOMPONENTS;i++) {
        classifyComponent(i, 0);
    }

    do {
        id = getComponent(componentsState, READY);
        if(id == -1) {
            id = getComponent(componentsState, DEFERABLE);
            deferred = 1;
        }

        if(id == -1) {
            break;       // deadlock
        }

        ]]></text><argument name="topologyName"/><text><![CDATA[_fptr[id][1]();

        if(]]></text><argument name="topologyName"/><text><![CDATA[_stopExecution == 1) return;

        classifyComponent(id, 1);
    } while(1);
}

int
getComponent(short *vec, short state) {
int i;

   for(i = 0;i < NCOMPONENTS;i++) {
       if(vec[i] == state) return i;
   }
   return -1;
}

void
classifyComponent(int id, short fired) {
int i, j;
char ready = 1, defer = 0;

   for(i = 0;i < ninputs[id];i++) {
       for(j = 0;j < ninputConnections[id][i];j++) {
           if(contains_dynamic_fifo(inputFifo[id][i][j]) < *inputSampleRates[id][i]) {           
               ready = 0;
               goto __state;
           }
       }
   }

   if(ready == 1) {   // check if the component became deferrable       
       for(i = 0;i < noutputs[id];i++) {
           for(j = 0;j < noutputConnections[id][i];j++) {
               if(*outputSampleRates[id][i][j] == 0) continue;
               if(contains_dynamic_fifo(outputFifo[id][i][j]) >= *outputSampleRates[id][i][j]) {   
                    defer = 1;
                    goto __state;
               }
            }
       }
   }

__state:
   componentsState[id] = ready | (defer << 1);

   if(fired == 1) {      
       for(i = 0;i < ninputComponents[id];i++) {
           classifyComponent(inputComponents[id][i], 0);
       }
 
       for(i = 0;i < noutputComponents[id];i++) {
          classifyComponent(outputComponents[id][i], 0);
       }
   }
}

void
]]></text>

<argument name="topologyName"/>

<text><![CDATA[_odog_finish() {
int i, j;

    for(i = 0;i < NCOMPONENTS;i++) {
        ]]></text><argument name="topologyName"/><text><![CDATA[_fptr[i][2]();
    }
    
    ]]></text><argument name="topologyName"/><text><![CDATA[_user_finish();
]]></text>
<argument name="destroySignals"/>
<text><![CDATA[
    for(i = 0;i < NCOMPONENTS;i++) { 
        for(j = 0;j < ninputs[i];j++) {            
            free(inputFifo[i][j]);
        }
        free(inputFifo[i]);
        free(ninputConnections[i]);
        free(inputComponents[i]);
        free(inputSampleRates[i]);
    }

    for(i = 0;i < NCOMPONENTS;i++) { 
        for(j = 0;j < noutputs[i];j++) {            
            free(outputFifo[i][j]);
            free(outputSampleRates[i][j]);
        }
        free(outputFifo[i]);
        free(noutputConnections[i]);
        free(outputComponents[i]);
        free(outputSampleRates[i]);
    }

    odog_timer_stop(&]]></text><argument name="topologyName"/><text><![CDATA[_timer);
    double t = odog_timer_time(&]]></text><argument name="topologyName"/><text><![CDATA[_timer);
    printf("Total exec time = %f\n", t);
}
]]></text>

</fileGenerator>
