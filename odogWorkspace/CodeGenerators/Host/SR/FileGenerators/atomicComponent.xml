<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fileGenerator PUBLIC "-//ODOGFILEGENERATOR//DTD//EN" "">

<fileGenerator>

<text><![CDATA[#include <stdlib.h>
#include <stdio.h>
#include "sr.h"
#include "copyData.h"

extern int ]]></text><argument name="containerName"/><text><![CDATA[_zeroTimeEvents;

]]></text>

<argument name="instanceExecutionMethods"/>
<argument name="signals"/>

<text>

static int
numberOfConnections(char *port) {
</text>
<argument name="numberOfConnectionsBody"/>
<text>
    return 0;
} 

static char *
nameOfConnection(char *port, int number) {
</text>
<argument name="nameOfConnectionBody"/>
<text><![CDATA[
    return NULL;
}

static void
receive(char *p1, void **p2, size_t *p3) {
]]></text>
<argument name="receiveBody"/>
<text>
}

static void
send(char *p1, void *p2, size_t length) {
</text>
<argument name="sendBody"/>
<text><![CDATA[
}

static void
sendAll(char *p1, void *p2, size_t length) {
int n, i;
char *qname;

  n = numberOfConnections(p1);
  for(i = 0;i < n;i++) {
      qname = nameOfConnection(p1, i);
      send(qname, p2, length);
  }
}

static char
canReceive(char *p1, int p2) {
    if(p2 != 1) return 0;
]]></text>
<argument name="canReceiveBody"/>
<text><![CDATA[
    return 0;
}

static char
canReceiveAll(char *p1, int p2) {
int i, n;
char *qname;
    if(p2 != 1) return 0;

    n = numberOfConnections(p1);
    for(i = 0;i < n;i++) {
        qname = nameOfConnection(p1, i);
        if(canReceive(qname, p2) == 0) return 0;
    }
    return 1;
}

static char
canSend(char *p1, int p2) {
    if(p2 != 1) return 0;
]]></text>
<argument name="canSendBody"/>
<text><![CDATA[
    return 0;
}

static char
canSendAll(char *p1, int p2) {
int i, n;
char *qname;

    if(p2 != 1) return 0;

    n = numberOfConnections(p1);
    for(i = 0;i < n;i++) {
        qname = nameOfConnection(p1, i);
        if(canSend(qname, p2) == 0) return 0;
    }
    return 1; 
}

static void
setAbsent(char *p1) {
]]></text>
<argument name="setAbsentBody"/>
<text><![CDATA[
}

static void
setAbsentAll(char *p1) {
    int i, n;
    char *qname;
   
    n = numberOfConnections(p1);
    for(i = 0;i < n;i++) {
        qname = nameOfConnection(p1, i);
        setAbsent(qname);
    }
}

static char
isAbsent(char *p1) {
]]></text>
<argument name="isAbsentBody"/>
<text><![CDATA[
    return 0;
}

static char
isAbsentAll(char *p1) {
int i,n;
char *qname;

    n = numberOfConnections(p1);
    for(i = 0;i < n;i++) {
        qname = nameOfConnection(p1, i);
        if(isAbsent(qname) == 0) return 0;
    }
    return 1; 
}

static void
printPortState(char *port, char input) {
int i;

   printf("State of port %s(%d)\n", port, numberOfConnections(port));
   for(i = 0;i < numberOfConnections(port);i++) {
       char *con = nameOfConnection(port, i);
       printf("  %s => ", con);
       if(input == 1) {
           if(canReceive(con, 1)) {
               printf(" known ");
              if(isAbsent(con)) printf(" absent");
           }
           else printf(" unknown");
       }
       else {
           if(!canSend(con, 1)) {
               printf(" known ");
               if(isAbsent(con)) printf(" absent");
           }
           else printf(" unknown");
       }
       printf("\n");
   }
}]]></text>

<argument name="attributes"/>
<argument name="initModule"/>
<argument name="computeModule"/>
<argument name="fixpointModule"/>
<argument name="finishModule"/>

</fileGenerator>
