<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fileGenerator PUBLIC "-//ODOGFILEGENERATOR//DTD//EN" "">

<fileGenerator>

<text><![CDATA[#include <stdlib.h>
#include <stdio.h>
#include "sr.h"
#include "copyData.h"

extern int ]]></text><argument name="containerName"/><text><![CDATA[_zeroTimeEvents;

]]></text>

<argument name="instanceExecutionMethods"/>
<argument name="signals"/>

<text>

static int
odog_numberOfConnections(char *port) {
</text>
<argument name="numberOfConnectionsBody"/>
<text>
    return 0;
} 

static char *
odog_nameOfConnection(char *port, int number) {
</text>
<argument name="nameOfConnectionBody"/>
<text><![CDATA[
    return NULL;
}

static void
odog_receive(char *p1, void **p2, size_t *p3) {
]]></text>
<argument name="receiveBody"/>
<text>
}

static void
odog_send(char *p1, void *p2, size_t length) {
</text>
<argument name="sendBody"/>
<text><![CDATA[
}

static void
odog_sendAll(char *p1, void *p2, size_t length) {
int n, i;
char *qname;

  n = odog_numberOfConnections(p1);
  for(i = 0;i < n;i++) {
      qname = odog_nameOfConnection(p1, i);
      odog_send(qname, p2, length);
  }
}

static char
odog_canReceive(char *p1, int p2) {
    if(p2 != 1) return 0;
]]></text>
<argument name="canReceiveBody"/>
<text><![CDATA[
    return 0;
}

static char
odog_canReceiveAll(char *p1, int p2) {
int i, n;
char *qname;
    if(p2 != 1) return 0;

    n = odog_numberOfConnections(p1);
    for(i = 0;i < n;i++) {
        qname = odog_nameOfConnection(p1, i);
        if(odog_canReceive(qname, p2) == 0) return 0;
    }
    return 1;
}

static char
odog_canSend(char *p1, int p2) {
    if(p2 != 1) return 0;
]]></text>
<argument name="canSendBody"/>
<text><![CDATA[
    return 0;
}

static char
odog_canSendAll(char *p1, int p2) {
int i, n;
char *qname;

    if(p2 != 1) return 0;

    n = odog_numberOfConnections(p1);
    for(i = 0;i < n;i++) {
        qname = odog_nameOfConnection(p1, i);
        if(odog_canSend(qname, p2) == 0) return 0;
    }
    return 1; 
}

static void
odog_setAbsent(char *p1) {
]]></text>
<argument name="setAbsentBody"/>
<text><![CDATA[
}

static void
odog_setAbsentAll(char *p1) {
    int i, n;
    char *qname;
   
    n = odog_numberOfConnections(p1);
    for(i = 0;i < n;i++) {
        qname = odog_nameOfConnection(p1, i);
        odog_setAbsent(qname);
    }
}

static char
odog_isAbsent(char *p1) {
]]></text>
<argument name="isAbsentBody"/>
<text><![CDATA[
    return 0;
}

static char
odog_isAbsentAll(char *p1) {
int i,n;
char *qname;

    n = odog_numberOfConnections(p1);
    for(i = 0;i < n;i++) {
        qname = odog_nameOfConnection(p1, i);
        if(odog_isAbsent(qname) == 0) return 0;
    }
    return 1; 
}

static void
printPortState(char *port, char input) {
int i;

   printf("State of port %s(%d)\n", port, odog_numberOfConnections(port));
   for(i = 0;i < odog_numberOfConnections(port);i++) {
       char *con = odog_nameOfConnection(port, i);
       printf("  %s => ", con);
       if(input == 1) {
           if(odog_canReceive(con, 1)) {
               printf(" known ");
              if(odog_isAbsent(con)) printf(" absent");
           }
           else printf(" unknown");
       }
       else {
           if(!odog_canSend(con, 1)) {
               printf(" known ");
               if(odog_isAbsent(con)) printf(" absent");
           }
           else printf(" unknown");
       }
       printf("\n");
   }
}]]></text>

<argument name="attributes"/>
<argument name="initModule"/>
<argument name="computeModule"/>
<argument name="fixpointModule"/>
<argument name="finishModule"/>

</fileGenerator>
