/* The following code was generated by JFlex 1.4.1 on 12/20/07 2:22 PM */

package odog.ruleChecker;

import java_cup.runtime.*;

/**
 * This class is a simple example lexer.
 */

class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\2\1\0\1\3\1\1\16\5\4\0\1\3\1\56"+
    "\1\63\1\0\1\4\1\0\1\51\1\0\1\47\1\50\1\45\1\0"+
    "\1\62\1\43\1\46\1\0\12\5\1\0\1\61\1\55\1\54\1\44"+
    "\2\0\2\4\1\17\1\4\1\41\3\4\1\27\6\4\1\36\3\4"+
    "\1\40\1\4\1\31\1\4\1\42\2\4\1\57\1\64\1\60\1\0"+
    "\1\4\1\0\1\13\1\22\1\16\1\6\1\21\1\37\1\25\1\34"+
    "\1\15\2\4\1\24\1\14\1\20\1\10\1\7\1\33\1\11\1\30"+
    "\1\12\1\23\1\32\1\4\1\35\1\26\1\4\1\0\1\52\1\0"+
    "\1\53\41\5\2\0\4\4\4\0\1\4\2\0\1\5\7\0\1\4"+
    "\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u013f\4\31\0\162\4"+
    "\4\0\14\4\16\0\5\4\11\0\1\4\21\0\130\5\5\0\23\5"+
    "\12\0\1\4\13\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4"+
    "\1\0\54\4\1\0\46\4\1\0\5\4\4\0\202\4\1\0\4\5"+
    "\3\0\105\4\1\0\46\4\2\0\2\4\6\0\20\4\41\0\46\4"+
    "\2\0\1\4\7\0\47\4\11\0\21\5\1\0\27\5\1\0\3\5"+
    "\1\0\1\5\1\0\2\5\1\0\1\5\13\0\33\4\5\0\3\4"+
    "\15\0\4\5\14\0\6\5\13\0\32\4\5\0\13\4\16\5\7\0"+
    "\12\5\4\0\2\4\1\5\143\4\1\0\1\4\10\5\1\0\6\5"+
    "\2\4\2\5\1\0\4\5\2\4\12\5\3\4\2\0\1\4\17\0"+
    "\1\5\1\4\1\5\36\4\33\5\2\0\3\4\60\0\46\4\13\5"+
    "\1\4\u014f\0\3\5\66\4\2\0\1\5\1\4\20\5\2\0\1\4"+
    "\4\5\3\0\12\4\2\5\2\0\12\5\21\0\3\5\1\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4"+
    "\2\0\1\5\1\4\7\5\2\0\2\5\2\0\3\5\11\0\1\5"+
    "\4\0\2\4\1\0\3\4\2\5\2\0\12\5\4\4\15\0\3\5"+
    "\1\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4"+
    "\1\0\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5"+
    "\2\0\3\5\13\0\4\4\1\0\1\4\7\0\14\5\3\4\14\0"+
    "\3\5\1\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4\1\0"+
    "\2\4\1\0\5\4\2\0\1\5\1\4\10\5\1\0\3\5\1\0"+
    "\3\5\2\0\1\4\17\0\2\4\2\5\2\0\12\5\1\0\1\4"+
    "\17\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4"+
    "\1\0\2\4\1\0\5\4\2\0\1\5\1\4\6\5\3\0\2\5"+
    "\2\0\3\5\10\0\2\5\4\0\2\4\1\0\3\4\4\0\12\5"+
    "\1\0\1\4\20\0\1\5\1\4\1\0\6\4\3\0\3\4\1\0"+
    "\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0"+
    "\3\4\3\0\10\4\1\0\3\4\4\0\5\5\3\0\3\5\1\0"+
    "\4\5\11\0\1\5\17\0\11\5\11\0\1\4\7\0\3\5\1\0"+
    "\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\4\0"+
    "\7\5\1\0\3\5\1\0\4\5\7\0\2\5\11\0\2\4\4\0"+
    "\12\5\22\0\2\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0"+
    "\12\4\1\0\5\4\2\0\1\5\1\4\7\5\1\0\3\5\1\0"+
    "\4\5\7\0\2\5\7\0\1\4\1\0\2\4\4\0\12\5\22\0"+
    "\2\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\20\4\4\0"+
    "\6\5\2\0\3\5\1\0\4\5\11\0\1\5\10\0\2\4\4\0"+
    "\12\5\22\0\2\5\1\0\22\4\3\0\30\4\1\0\11\4\1\0"+
    "\1\4\2\0\7\4\3\0\1\5\4\0\6\5\1\0\1\5\1\0"+
    "\10\5\22\0\2\5\15\0\60\4\1\5\2\4\7\5\4\0\10\4"+
    "\10\5\1\0\12\5\47\0\2\4\1\0\1\4\2\0\2\4\1\0"+
    "\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\5\2\4\6\5"+
    "\1\0\2\5\1\4\2\0\5\4\1\0\1\4\1\0\6\5\2\0"+
    "\12\5\2\0\2\4\42\0\1\4\27\0\2\5\6\0\12\5\13\0"+
    "\1\5\1\0\1\5\1\0\1\5\4\0\2\5\10\4\1\0\42\4"+
    "\6\0\24\5\1\0\2\5\4\4\4\0\10\5\1\0\44\5\11\0"+
    "\1\5\71\0\42\4\1\0\5\4\1\0\2\4\1\0\7\5\3\0"+
    "\4\5\6\0\12\5\6\0\6\4\4\5\106\0\46\4\12\0\51\4"+
    "\7\0\132\4\5\0\104\4\5\0\122\4\6\0\7\4\1\0\77\4"+
    "\1\0\1\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4"+
    "\2\0\47\4\1\0\1\4\1\0\4\4\2\0\37\4\1\0\1\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\7\4"+
    "\1\0\7\4\1\0\27\4\1\0\37\4\1\0\1\4\1\0\4\4"+
    "\2\0\7\4\1\0\47\4\1\0\23\4\16\0\11\5\56\0\125\4"+
    "\14\0\u026c\4\2\0\10\4\12\0\32\4\5\0\113\4\3\0\3\4"+
    "\17\0\15\4\1\0\4\4\3\5\13\0\22\4\3\5\13\0\22\4"+
    "\2\5\14\0\15\4\1\0\3\4\1\0\2\5\14\0\64\4\40\5"+
    "\3\0\1\4\3\0\2\4\1\5\2\0\12\5\41\0\3\5\2\0"+
    "\12\5\6\0\130\4\10\0\51\4\1\5\126\0\35\4\3\0\14\5"+
    "\4\0\14\5\12\0\12\5\36\4\2\0\5\4\u038b\0\154\4\224\0"+
    "\234\4\4\0\132\4\6\0\26\4\2\0\6\4\2\0\46\4\2\0"+
    "\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0"+
    "\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0"+
    "\7\4\17\0\4\5\32\0\5\5\20\0\2\4\23\0\1\4\13\0"+
    "\4\5\6\0\6\5\1\0\1\4\15\0\1\4\40\0\22\4\36\0"+
    "\15\5\4\0\1\5\3\0\6\5\27\0\1\4\4\0\1\4\2\0"+
    "\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\4\4\1\0\3\4\1\0\7\4\3\0\3\4\5\0"+
    "\5\4\26\0\44\4\u0e81\0\3\4\31\0\11\4\6\5\1\0\5\4"+
    "\2\0\5\4\4\0\126\4\2\0\2\5\2\0\3\4\1\0\137\4"+
    "\5\0\50\4\4\0\136\4\21\0\30\4\70\0\20\4\u0200\0\u19b6\4"+
    "\112\0\u51a6\4\132\0\u048d\4\u0773\0\u2ba4\4\u215c\0\u012e\4\2\0\73\4"+
    "\225\0\7\4\14\0\5\4\5\0\1\4\1\5\12\4\1\0\15\4"+
    "\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4"+
    "\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4\3\0\20\5"+
    "\20\0\4\5\17\0\2\4\30\0\3\4\31\0\1\4\6\0\5\4"+
    "\1\0\207\4\2\0\1\5\4\0\1\4\13\0\12\5\7\0\32\4"+
    "\4\0\1\4\1\0\32\4\12\0\132\4\3\0\6\4\2\0\6\4"+
    "\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4\22\0\3\5"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\13\3\1\1\1\4\1\5\1\6"+
    "\1\7\2\1\1\10\1\11\1\12\1\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\11\3\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\13\3\1\40\1\41\13\3"+
    "\1\42\11\3\1\43\1\44\4\3\1\45\3\3\1\46"+
    "\7\3\1\47\11\3\1\50\10\3\1\51\13\3\1\52"+
    "\1\53\2\3\1\54\3\3\1\55\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\152\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\152\0\152\0\152\0\u0385\0\u03ba\0\152"+
    "\0\u03ef\0\u0424\0\u0459\0\152\0\152\0\152\0\152\0\152"+
    "\0\u048e\0\152\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\u066b\0\u06a0\0\324\0\324\0\u06d5\0\152"+
    "\0\152\0\152\0\152\0\u070a\0\152\0\152\0\152\0\152"+
    "\0\152\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d"+
    "\0\u08b2\0\u08e7\0\u091c\0\u0951\0\152\0\152\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\324\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\324\0\324\0\u0daa\0\u0ddf\0\u0e14"+
    "\0\u0e49\0\324\0\u0e7e\0\u0eb3\0\u0ee8\0\324\0\u0f1d\0\u0f52"+
    "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa"+
    "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2"+
    "\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a"+
    "\0\324\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd"+
    "\0\u15f2\0\u1627\0\u165c\0\u1691\0\324\0\324\0\u16c6\0\u16fb"+
    "\0\324\0\u1730\0\u1765\0\u179a\0\324\0\324\0\324";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\3\1\7\2\6\1\10"+
    "\1\11\1\12\1\13\1\6\1\14\2\6\1\15\10\6"+
    "\1\16\3\6\1\17\2\6\1\20\1\6\1\21\1\22"+
    "\1\3\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\3"+
    "\1\41\2\3\60\41\1\42\1\43\67\0\1\5\66\0"+
    "\37\6\26\0\3\6\1\44\11\6\1\45\21\6\26\0"+
    "\15\6\1\46\21\6\26\0\4\6\1\47\32\6\26\0"+
    "\6\6\1\50\30\6\26\0\15\6\1\51\21\6\26\0"+
    "\4\6\1\52\32\6\26\0\31\6\1\53\5\6\26\0"+
    "\7\6\1\54\27\6\26\0\34\6\1\55\2\6\26\0"+
    "\36\6\1\56\66\0\1\57\74\0\1\60\61\0\1\61"+
    "\65\0\1\62\56\0\1\63\74\0\1\64\64\0\1\65"+
    "\10\0\1\41\2\0\60\41\13\0\1\66\1\67\5\0"+
    "\1\70\42\0\1\71\5\0\4\6\1\72\32\6\26\0"+
    "\33\6\1\73\3\6\26\0\27\6\1\74\7\6\26\0"+
    "\3\6\1\75\33\6\26\0\4\6\1\76\1\6\1\77"+
    "\30\6\26\0\6\6\1\100\30\6\26\0\10\6\1\101"+
    "\3\6\1\102\22\6\26\0\3\6\1\103\33\6\26\0"+
    "\20\6\1\104\16\6\67\0\1\105\63\0\1\106\24\0"+
    "\5\6\1\107\31\6\26\0\25\6\1\110\11\6\26\0"+
    "\24\6\1\111\12\6\26\0\4\6\1\112\32\6\26\0"+
    "\10\6\1\113\26\6\26\0\5\6\1\114\31\6\26\0"+
    "\30\6\1\115\6\6\26\0\3\6\1\116\33\6\26\0"+
    "\14\6\1\117\22\6\26\0\4\6\1\120\32\6\26\0"+
    "\17\6\1\121\17\6\26\0\6\6\1\122\30\6\26\0"+
    "\15\6\1\123\21\6\26\0\15\6\1\124\21\6\26\0"+
    "\20\6\1\125\16\6\26\0\11\6\1\126\25\6\26\0"+
    "\11\6\1\127\25\6\26\0\4\6\1\130\32\6\26\0"+
    "\23\6\1\131\13\6\26\0\15\6\1\132\21\6\26\0"+
    "\5\6\1\133\31\6\26\0\15\6\1\134\21\6\26\0"+
    "\5\6\1\135\31\6\26\0\5\6\1\136\31\6\26\0"+
    "\4\6\1\137\32\6\26\0\12\6\1\140\24\6\26\0"+
    "\16\6\1\141\20\6\26\0\2\6\1\142\34\6\26\0"+
    "\14\6\1\143\22\6\26\0\12\6\1\144\24\6\26\0"+
    "\6\6\1\145\30\6\26\0\26\6\1\146\10\6\26\0"+
    "\21\6\1\147\15\6\26\0\13\6\1\150\11\6\1\151"+
    "\11\6\26\0\17\6\1\152\17\6\26\0\24\6\1\153"+
    "\12\6\26\0\6\6\1\154\30\6\26\0\15\6\1\155"+
    "\21\6\26\0\22\6\1\156\14\6\26\0\4\6\1\157"+
    "\32\6\26\0\15\6\1\160\21\6\26\0\6\6\1\161"+
    "\30\6\26\0\6\6\1\162\30\6\26\0\11\6\1\163"+
    "\25\6\26\0\2\6\1\164\34\6\26\0\25\6\1\165"+
    "\11\6\26\0\10\6\1\166\26\6\26\0\5\6\1\167"+
    "\31\6\26\0\15\6\1\170\21\6\26\0\7\6\1\171"+
    "\27\6\26\0\4\6\1\172\32\6\26\0\32\6\1\173"+
    "\4\6\26\0\15\6\1\174\21\6\26\0\3\6\1\175"+
    "\33\6\26\0\24\6\1\176\12\6\26\0\13\6\1\177"+
    "\23\6\26\0\14\6\1\200\22\6\26\0\14\6\1\201"+
    "\22\6\26\0\4\6\1\202\32\6\26\0\5\6\1\203"+
    "\31\6\26\0\4\6\1\204\32\6\26\0\11\6\1\205"+
    "\25\6\26\0\20\6\1\206\16\6\26\0\12\6\1\207"+
    "\24\6\26\0\5\6\1\210\31\6\26\0\24\6\1\211"+
    "\12\6\26\0\14\6\1\212\22\6\26\0\4\6\1\213"+
    "\32\6\26\0\7\6\1\214\27\6\26\0\15\6\1\215"+
    "\21\6\26\0\6\6\1\216\30\6\26\0\11\6\1\217"+
    "\25\6\26\0\15\6\1\220\21\6\26\0\14\6\1\221"+
    "\22\6\26\0\24\6\1\222\12\6\26\0\4\6\1\223"+
    "\32\6\26\0\14\6\1\224\22\6\26\0\24\6\1\225"+
    "\12\6\26\0\14\6\1\226\22\6\26\0\6\6\1\227"+
    "\30\6\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6095];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\15\1\3\11\2\1\1\11"+
    "\3\1\5\11\1\1\1\11\15\1\4\11\1\1\5\11"+
    "\13\1\2\11\121\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
/* 
 * Copyright (c) 2006-2014, Ivan "Joker"
 * All rights reserved.
 *
 * This software is open-source under GNU General Public License, version 2 
 * see LICENSE file
 */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1782) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { return symbol(sym.HVER);
          }
        case 48: break;
        case 39: 
          { return symbol(sym.TOPOLOGY);
          }
        case 49: break;
        case 6: 
          { return symbol(sym.LPAR);
          }
        case 50: break;
        case 4: 
          { return symbol(sym.GT);
          }
        case 51: break;
        case 45: 
          { return symbol(sym.ATTRCLASS);
          }
        case 52: break;
        case 32: 
          { return symbol(sym.EX_CM);
          }
        case 53: break;
        case 40: 
          { return symbol(sym.ATTR);
          }
        case 54: break;
        case 29: 
          { string.append('\t');
          }
        case 55: break;
        case 10: 
          { return symbol(sym.LT);
          }
        case 56: break;
        case 33: 
          { return symbol(sym.IFONLYIF);
          }
        case 57: break;
        case 44: 
          { return symbol(sym.VER);
          }
        case 58: break;
        case 15: 
          { string.setLength(0); yybegin(STRING);
          }
        case 59: break;
        case 7: 
          { return symbol(sym.RPAR);
          }
        case 60: break;
        case 43: 
          { return symbol(sym.EXPORTEDPORT);
          }
        case 61: break;
        case 8: 
          { return symbol(sym.NOT);
          }
        case 62: break;
        case 23: 
          { return symbol(sym.AND);
          }
        case 63: break;
        case 20: 
          { return symbol(sym.EX_QUAL);
          }
        case 64: break;
        case 18: 
          { string.append('\\');
          }
        case 65: break;
        case 42: 
          { return symbol(sym.COMPONENTINSTANCE);
          }
        case 66: break;
        case 28: 
          { string.append('\r');
          }
        case 67: break;
        case 27: 
          { return symbol(sym.DIFF);
          }
        case 68: break;
        case 1: 
          { throw new Error("Illegal character <"+
                                                    yytext()+">");
          }
        case 69: break;
        case 47: 
          { return symbol(sym.ACOMP);
          }
        case 70: break;
        case 37: 
          { return symbol(sym.METHOD);
          }
        case 71: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 72: break;
        case 31: 
          { string.append('\"');
          }
        case 73: break;
        case 14: 
          { return symbol(sym.COLON);
          }
        case 74: break;
        case 38: 
          { return symbol(sym.REQSERV);
          }
        case 75: break;
        case 41: 
          { return symbol(sym.CONNECTION);
          }
        case 76: break;
        case 24: 
          { return symbol(sym.OR);
          }
        case 77: break;
        case 19: 
          { return symbol(sym.PT_QUAL);
          }
        case 78: break;
        case 9: 
          { return symbol(sym.EQ);
          }
        case 79: break;
        case 13: 
          { return symbol(sym.SEMICOLON);
          }
        case 80: break;
        case 30: 
          { string.append('\n');
          }
        case 81: break;
        case 11: 
          { return symbol(sym.LBRAC);
          }
        case 82: break;
        case 17: 
          { yybegin(YYINITIAL); 
                                   String s = string.toString();
                                   string = new StringBuffer();
                                   return symbol(sym.STRING_LITERAL, s);
          }
        case 83: break;
        case 12: 
          { return symbol(sym.RBRAC);
          }
        case 84: break;
        case 21: 
          { return symbol(sym.EX_AR);
          }
        case 85: break;
        case 34: 
          { return symbol(sym.DPORT);
          }
        case 86: break;
        case 35: 
          { return symbol(sym.VALUE);
          }
        case 87: break;
        case 22: 
          { return symbol(sym.GE);
          }
        case 88: break;
        case 25: 
          { return symbol(sym.IMPLY);
          }
        case 89: break;
        case 26: 
          { return symbol(sym.LE);
          }
        case 90: break;
        case 36: 
          { return symbol(sym.DEFVER);
          }
        case 91: break;
        case 16: 
          { string.append( yytext() );
          }
        case 92: break;
        case 5: 
          { return symbol(sym.DOT);
          }
        case 93: break;
        case 2: 
          { 
          }
        case 94: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
